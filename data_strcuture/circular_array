class MyCircularQueue(object):

    def __init__(self, k):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        :type k: int
        """
        self.size = k-1
        self.queue = [None]*(k)
        self.front_idx = 0
        self.rear_idx = k-1
        self.space_used = 0

    def enQueue(self, value):
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """
        if self.isFull():
            return -1
        else:
            if self.rear_idx == self.size:
                self.rear_idx = 0
            else:
                self.rear_idx += 1
            self.queue[self.rear_idx] = value
            self.space_used += 1
            return True   

    def deQueue(self):
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        :rtype: bool
        """
        if self.isEmpty():
            return -1
        else:
            self.queue[self.front_idx] = None
            self.space_used -= 1
            if self.front_idx == self.size:
                self.front_idx = 0
            else:
                self.front_idx += 1          
            return True
            

# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
